@using BlogApp.Client.Blazor.States.Auth
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager _navigationManager

@inherits LayoutComponentBase

<RadzenComponents @rendermode="InteractiveServer" />


@if (IsShowContent)
{
    <RadzenLayout>
        <RadzenHeader>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
                    <RadzenSidebarToggle Click="@(() => sidebar1Expanded = !sidebar1Expanded)" />
                    <RadzenLabel Text="Header" />
                </RadzenStack>

                <AuthorizeView>
                    <Authorized>
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
                            <RadzenLabel Text="Hoşgeldiniz," /> <div>@user.Identity?.Name!</div>
                            <RadzenLink @onclick="Logout">Çıkış Yap</RadzenLink>
                            <RadzenAppearanceToggle />
                        </RadzenStack>
                    </Authorized>
                </AuthorizeView>
            </RadzenStack>
        </RadzenHeader>
        <RadzenSidebar @bind-Expanded="@sidebar1Expanded">
            <RadzenPanelMenu Click="OnParentClicked" Multiple="true">
                <RadzenPanelMenuItem Text="Dashboard" Path="/Admin" Icon="dashboard"></RadzenPanelMenuItem>
                <RadzenPanelMenuItem Text="Kategori Yönetimi" Path="/Admin/Categories" Click="@(()=> selectedMenu = !selectedMenu)" Selected="@selectedMenu" Icon="category"></RadzenPanelMenuItem>

                <RadzenPanelMenuItem Text="Makaleler" Icon="home">
                    <RadzenPanelMenuItem Text="Makale Listesi" Path="/Admin/Articles" Icon="account_circle"></RadzenPanelMenuItem>
                    <RadzenPanelMenuItem Text="Makale Ekle" Path="/Admin/Articles/Add" Icon="line_weight"></RadzenPanelMenuItem>
                    <RadzenPanelMenuItem Text="Taslaklar" Path="/Admin/Articles/Drafts" Icon="attach_file"></RadzenPanelMenuItem>
                </RadzenPanelMenuItem>

                <RadzenPanelMenuItem Text="Kullanıcı Yönetimi" Icon="payment">
                    <RadzenPanelMenuItem Text="Kullanıcı Listesi" Path="/Admin/Users" Icon="check_circle"></RadzenPanelMenuItem>
                    <RadzenPanelMenuItem Text="Kullanıcı Ekle" Path="/Admin/Users/Add" Icon="input"></RadzenPanelMenuItem>
                    <RadzenPanelMenuItem Text="Kullanıcı Rolleri" Path="/Admin/Users/Roles" Icon="description"></RadzenPanelMenuItem>
                </RadzenPanelMenuItem>

            </RadzenPanelMenu>
        </RadzenSidebar>
        <RadzenBody>
            <div class="rz-p-4">
                @Body
            </div>
        </RadzenBody>
    </RadzenLayout>
}

@code {

    bool sidebar1Expanded = true;
    bool selectedMenu = false;

    void OnParentClicked(MenuItemEventArgs args)
    {
    }

    void OnChildClicked(MenuItemEventArgs args)
    {
    }

    bool _drawerOpen = true;
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    public bool IsShowContent { get; set; }
    private ClaimsPrincipal user;
    protected override async Task OnInitializedAsync()
    {
        var authState = await ((CustomAuthStateProvider)AuthStateProvider).GetAuthenticationStateAsync();
        user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            _navigationManager.NavigateTo("/login");
        }
        else
        {
            IsShowContent = true;
        }
    }

    private async Task Logout()
    {
        await ((CustomAuthStateProvider)AuthStateProvider).MarkUserAsLoggedOut();
        _navigationManager.NavigateTo("/");
    }
}