@using BlogApp.Client.Blazor.States.Auth
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager _navigationManager

@inherits LayoutComponentBase

@* Required *@
<MudThemeProvider />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

@if (IsShowContent)
{
    <MudLayout>
        <MudAppBar Elevation="6" Dense="true">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MudText Typo="Typo.h6" Class="ml-3" Edge="@Edge.End">Admin Paneli</MudText>
            <MudSpacer />
            <AuthorizeView>
                <Authorized>
                    <MudText Typo="Typo.body2" Class="ml-3">Hoşgeldiniz, @user.Identity?.Name!</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" Edge="Edge.End" @onclick="Logout" ButtonType="ButtonType.Button" />
                </Authorized>
                <NotAuthorized>
                    <MudText Typo="Typo.body2" Class="ml-3">Yetkisiz Kullanıcı!</MudText>
                </NotAuthorized>
            </AuthorizeView>
        </MudAppBar>
        <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
            <NavMenu />
        </MudDrawer>
        <MudMainContent>
            <MudContainer Fixed="true" Style="margin-top:15px">
                @Body
            </MudContainer>

        </MudMainContent>
    </MudLayout>
}

@code {

    bool _drawerOpen = true;
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    public bool IsShowContent { get; set; }
    private ClaimsPrincipal user;
    protected override async Task OnInitializedAsync()
    {
        var authState = await ((CustomAuthStateProvider)AuthStateProvider).GetAuthenticationStateAsync();
        user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            _navigationManager.NavigateTo("/login");
        }
        else
        {
            IsShowContent = true;
        }
    }

    private async Task Logout()
    {
        await ((CustomAuthStateProvider)AuthStateProvider).MarkUserAsLoggedOut();
        _navigationManager.NavigateTo("/");
    }
}