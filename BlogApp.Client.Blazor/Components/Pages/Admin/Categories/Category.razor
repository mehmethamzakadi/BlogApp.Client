@page "/Admin/Categories";
@using BlogApp.Client.Blazor.Models
@using BlogApp.Client.Blazor.Services.Common
@using BlogApp.Client.Blazor.Services.DataGrid
@using BlogApp.Client.Blazor.SharedKernel.Models
@using BlogApp.Client.Blazor.States.Category
@using Microsoft.AspNetCore.Authorization
@implements IDisposable

@attribute [Authorize(Roles = "Admin")]
@inject CategoryState State
@inject NotificationService NotificationService
@inject IExceptionHandlerService ExceptionHandler
@inject DialogService DialogService
@inject IFilterService FilterService
@rendermode InteractiveServer

<CascadingValue Value="this">
    <ErrorBoundary @ref="errorBoundary">
        <ChildContent>
            <div class="mb-3">
                <RadzenButton ButtonStyle="ButtonStyle.Primary"
                              Icon="add"
                              Text="Yeni Kategori Ekle"
                              Click="@ShowAddCategoryDialog" />
            </div>

            <RadzenDataGrid @ref="grid"
                            IsLoading="@State.IsLoading"
                            Data="@State.Categories"
                            Count="@State.TotalCount"
                            LoadData="@LoadData"
                            AllowSorting="true"
                            AllowFiltering="true"
                            FilterMode="FilterMode.Simple"
                            FilterCaseSensitivity="@FilterCaseSensitivity.CaseInsensitive"
                            LogicalFilterOperator="@LogicalFilterOperator.And"
                            PagingSummaryFormat="@pagingSummaryFormat"
                            PageSize="10"
                            PageSizeOptions="@(new int[] { 10, 20, 30 })"
                            ShowPagingSummary="true"
                            AllowPaging="true">
                <Columns>
                    <RadzenDataGridColumn Property="@nameof(CategoryModel.Name)" Title="Kategori Adı" />
                    <RadzenDataGridColumn TItem="CategoryModel" Context="data" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                        <Template Context="category">
                            <RadzenButton Icon="edit"
                                          ButtonStyle="ButtonStyle.Info"
                                          Variant="Variant.Flat"
                                          Size="ButtonSize.Medium"
                                          Click="@(() => EditCategory(category))"
                                          Disabled="@State.IsSubmitting" />
                            <RadzenButton Icon="delete"
                                          ButtonStyle="ButtonStyle.Danger"
                                          Variant="Variant.Flat"
                                          Size="ButtonSize.Medium"
                                          Click="@(async () => await DeleteCategory(category))"
                                          Disabled="@State.IsSubmitting"
                                          class="ms-1" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </ChildContent>
        <ErrorContent Context="ex">
            <RadzenAlert AllowClose="false" AlertStyle="AlertStyle.Danger" ShowIcon="true">
                Bir hata oluştu: @ex.Message
            </RadzenAlert>
        </ErrorContent>
    </ErrorBoundary>
</CascadingValue>

@code {
    private ErrorBoundary errorBoundary;
    private RadzenDataGrid<CategoryModel> grid;
    private readonly string pagingSummaryFormat = "Sayfa {0} / {1} görüntüleniyor (toplam {2} kayıt)";

    protected override void OnInitialized()
    {
        State.OnStateChanged += StateHasChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        var request = new DataGridRequest
        {
            DynamicQuery = new DynamicQuery { Filter = null, Sort = null },
            PaginatedRequest = new PaginatedRequest { PageIndex = 0, PageSize = 10 },
        };

        await State.LoadCategoriesAsync(request);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await grid.Reload();
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        State.OnStateChanged -= StateHasChanged;
        GC.SuppressFinalize(this);
    }

    protected override void OnParametersSet()
    {
        errorBoundary?.Recover();
    }

    private async Task ShowAddCategoryDialog()
    {
        State.ResetCurrentCategory();
        var options = new DialogOptions
        {
            Width = "500px",
            Height = "auto",
            CloseDialogOnEsc = true,
            CloseDialogOnOverlayClick = false,
            ShowClose = true
        };

        await DialogService.OpenAsync<CategoryForm>("Yeni Kategori Ekle",
            new Dictionary<string, object>
            {
                { "OnSaved", new EventCallback(this, async () => {
                    await grid.Reload();
                    DialogService.Close();
                })},
                { "OnCancel", new EventCallback(this, () => DialogService.Close()) }
            }, options);
    }

    private async Task EditCategory(CategoryModel category)
    {
        if (!State.IsSubmitting)
        {
            State.SetCurrentCategory(category);
            var options = new DialogOptions
            {
                Width = "500px",
                Height = "auto",
                CloseDialogOnEsc = true,
                CloseDialogOnOverlayClick = false,
                ShowClose = true
            };

            await DialogService.OpenAsync<CategoryForm>("Kategori Düzenle",
                new Dictionary<string, object>
                {
                    { "OnSaved", new EventCallback(this, async () => {
                        await grid.Reload();
                        DialogService.Close();
                    })},
                    { "OnCancel", new EventCallback(this, () => DialogService.Close()) }
                }, options);
        }
    }

    private async Task DeleteCategory(CategoryModel category)
    {
        try
        {
            var confirmOptions = new ConfirmOptions
            {
                OkButtonText = "Evet",
                CancelButtonText = "Hayır"
            };

            if (await DialogService.Confirm(
                    "Bu kategoriyi silmek istediğinize emin misiniz?",
                    "Kategori Silme",
                    confirmOptions) == true)
            {
                await State.DeleteCategoryAsync(category.Id);
                NotificationService.Notify(NotificationSeverity.Success, "Başarılı", "Kategori başarıyla silindi.");
                await grid.Reload();
            }
        }
        catch (Exception ex)
        {
            await ExceptionHandler.HandleExceptionAsync(ex, NotificationService);
        }
    }

    private void Cancel()
    {
        if (!State.IsSubmitting)
        {
            State.ResetCurrentCategory();
        }
    }

    async Task LoadData(LoadDataArgs args)
    {
        DataGridRequest dataGridRequest = new DataGridRequest
        {
            PaginatedRequest = new PaginatedRequest
            {
                PageIndex = (args.Skip.Value / args.Top.Value),
                PageSize = args.Top.Value,
            },
            DynamicQuery = new DynamicQuery
            {
                Filter = null,
                Sort = null
            }
        };

        await Task.Yield();

        Filter baseFilter = new Filter()
        {
            Filters = new List<Filter>()
        };

        void AddFirsFilter(Filter filter)
        {
            baseFilter = filter;
        }

        if (args.Filters.Any())
        {
            foreach (var argFilt in args.Filters)
            {
                if (string.IsNullOrEmpty(baseFilter.Value))
                {
                    AddFirsFilter(new Filter
                    {
                        Field = argFilt.Property,
                        Value = (argFilt.FilterValue.ToString()).ToLower(),
                        Operator = argFilt.FilterOperator.GetDisplayDescription(),
                        Logic = argFilt.LogicalFilterOperator.GetDisplayDescription(),
                        Filters = new List<Filter>()
                    });
                }
                else
                {
                    if (!(baseFilter.Field == argFilt.Property) && !baseFilter.Filters.Any(x => x.Field == argFilt.Property))
                    {
                        baseFilter.Filters.Add(new Filter
                        {
                            Field = argFilt.Property,
                            Value = (argFilt.FilterValue.ToString()).ToLower(),
                            Operator = argFilt.FilterOperator.GetDisplayDescription(),
                            Logic = argFilt.LogicalFilterOperator.GetDisplayDescription(),
                            Filters = new List<Filter>()
                        });
                    }
                }
            }
        }
        else
        {
            baseFilter = new Filter()
            {
                Filters = new List<Filter>()
            };
        }

        var sorts = new List<Sort>();
        foreach (var sort in args.Sorts)
        {
            sorts.Add(new Sort
            {
                Field = sort.Property,
                Dir = sort.SortOrder.Value.ToString()
            });
        }

        dataGridRequest.DynamicQuery.Filter = baseFilter.Value != null ? baseFilter : null;
        dataGridRequest.DynamicQuery.Sort = sorts.Count > 0 ? sorts : null;

        await State.LoadCategoriesAsync(dataGridRequest);
    }
}