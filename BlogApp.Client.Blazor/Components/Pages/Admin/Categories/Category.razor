@page "/Admin/Categories";
@using BlogApp.Client.Blazor.Models
@using BlogApp.Client.Blazor.Services.Category
@using BlogApp.Client.Blazor.SharedKernel.Models

@inject ICategoryService categoryService
@rendermode InteractiveServer

<RadzenDataGrid @ref="grid"
                IsLoading=@isLoading
                Data="@categories"
                LoadData="@LoadData"
                AllowSorting="true"
                AllowFiltering="true"
                FilterMode="FilterMode.Simple"
                FilterCaseSensitivity="@FilterCaseSensitivity.CaseInsensitive"
                LogicalFilterOperator="@LogicalFilterOperator.And"
                PagingSummaryFormat="@pagingSummaryFormat">
    <HeaderTemplate>
        <RadzenButton Text="Yeni Ekle" Click=@(()=> {}) />
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn Property="@nameof(CategoryModel.Name)" Title="Kategori Adı" />
    </Columns>
    <FooterTemplate>
        <RadzenPager ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat" HorizontalAlign="HorizontalAlign.Center" Count="count" PageSize="10" PageNumbersCount="5" PageChanged="@PageChanged" />
    </FooterTemplate>
</RadzenDataGrid>


@code {
    PaginationListResponse<CategoryModel> paginationListResponse;
    RadzenDataGrid<CategoryModel> grid;
    IEnumerable<CategoryModel> categories;

    int count;
    bool isLoading = false;

    string pagingSummaryFormat = "Sayfa {0} / {1} görüntüleniyor (toplam {2} kayıt)";


    DataGridRequest dataGridRequest = new DataGridRequest
        {
            PaginatedRequest = new PaginatedRequest
            {
                PageIndex = 0,
                PageSize = 10,
            },
            DynamicQuery = new DynamicQuery
            {
                Filter = null,
                Sort = null
            }
        };



    async Task PageChanged(PagerEventArgs args)
    {
        dataGridRequest.PaginatedRequest.PageIndex = args.PageIndex;
        dataGridRequest.PaginatedRequest.PageSize = args.Top;

        paginationListResponse = await categoryService.GetCategoryPaginationListAsync(dataGridRequest);
        categories = paginationListResponse.Items;
    }

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        await Task.Yield();

        Filter baseFilter = new Filter()
            {
                Filters = new List<Filter>()
            };

        void AddFirsFilter(Filter filter)
        {
            baseFilter = filter;
        }

        if (args.Filters.Any())
        {
            foreach (var argFilt in args.Filters)
            {
                if (string.IsNullOrEmpty(baseFilter.Value))
                {
                    AddFirsFilter(new Filter
                        {
                            Field = argFilt.Property,
                            Value = (argFilt.FilterValue.ToString()).ToLower(),
                            Operator = argFilt.FilterOperator.GetDisplayDescription(),
                            Logic = argFilt.LogicalFilterOperator.GetDisplayDescription(),
                            Filters = new List<Filter>()
                        });
                }
                else
                {
                    if (!(baseFilter.Field == argFilt.Property) && !baseFilter.Filters.Any(x => x.Field == argFilt.Property))
                    {
                        baseFilter.Filters.Add(new Filter
                            {
                                Field = argFilt.Property,
                                Value = (argFilt.FilterValue.ToString()).ToLower(),
                                Operator = argFilt.FilterOperator.GetDisplayDescription(),
                                Logic = argFilt.LogicalFilterOperator.GetDisplayDescription(),
                                Filters = new List<Filter>()
                            });
                    }
                }
            }
        }
        else
        {
            baseFilter = new Filter()
                {
                    Filters = new List<Filter>()
                };
        }


        var sorts = new List<Sort>();
        foreach (var sort in args.Sorts)
        {
            sorts.Add(new Sort
                {
                    Field = sort.Property,
                    Dir = sort.SortOrder.Value.ToString()
                });
        }

        dataGridRequest.DynamicQuery.Filter = baseFilter.Value != null ? baseFilter : null;
        dataGridRequest.DynamicQuery.Sort = sorts.Count > 0 ? sorts : null;

        paginationListResponse = await categoryService.GetCategoryPaginationListAsync(dataGridRequest);

        count = paginationListResponse.Count;

        // Perform paging via Skip and Take.
        categories = paginationListResponse.Items.ToList();

        isLoading = false;
    }



}
