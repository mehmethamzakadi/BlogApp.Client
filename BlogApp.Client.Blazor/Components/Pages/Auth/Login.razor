@page "/login"
@using BlogApp.Client.Blazor.Models.Auth;
@using BlogApp.Client.Blazor.Services.Auth;
@using BlogApp.Client.Blazor.States.Auth
@using Microsoft.AspNetCore.Components.Authorization;

@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Login</PageTitle>

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <h2>Hoşgeldiniz!</h2>
            <p>Devam etmek için lütfen oturum açın.</p>
        </div>

        <RadzenTemplateForm class="login-form" TItem="LoginRequest" Data=@model Submit=@OnSubmit>
            <div class="form-container">
                <div class="form-group">
                    <div class="input-wrapper">
                        <RadzenIcon Icon="email" class="input-icon" />
                        <RadzenTextBox 
                            Name="Email" 
                            @bind-Value=@model.Email 
                            Placeholder="Email adresinizi giriniz"
                            aria-label="Email giriş alanı"
                            class="login-input" />
                    </div>
                    <div class="validation-wrapper">
                        <RadzenRequiredValidator Component="Email" Text="Email zorunlu" />
                        <RadzenEmailValidator Component="Email" Text="Lütfen geçerli bir email adresi giriniz" />
                    </div>
                </div>

                <div class="form-group">
                    <div class="input-wrapper">
                        <RadzenIcon Icon="lock" class="input-icon" />
                        <RadzenPassword 
                            Name="Password" 
                            @bind-Value=@model.Password 
                            Placeholder="Şifrenizi giriniz"
                            aria-label="Şifre giriş alanı"
                            class="login-input" />
                    </div>
                    <div class="validation-wrapper">
                        <RadzenRequiredValidator Component="Password" Text="Şifre zorunlu" />
                    </div>
                </div>

                <div class="remember-forgot">
                    <div class="remember-me">
                        <RadzenCheckBox @bind-Value=@model.RememberMe Name="RememberMe" />
                        <RadzenLabel Text="Beni hatırla" Component="RememberMe" Style="margin-left: 8px;" />
                    </div>
                    <a href="/forgot-password" class="forgot-link">Şifrenizi mi unuttunuz?</a>
                </div>

                <div class="button-wrapper">
                    <RadzenButton ButtonType="ButtonType.Submit" 
                                Text="Giriş Yap" 
                                ButtonStyle="ButtonStyle.Primary" 
                                Class="login-button"
                                IsBusy=@isBusy 
                                BusyText="Giriş yapılıyor..." />
                </div>
            </div>
        </RadzenTemplateForm>

        <div class="login-footer">
        </div>
    </div>
</div>

@code {
    private LoginRequest model = new();
    private bool isBusy = false;

    private async Task OnSubmit()
    {
        try
        {
            isBusy = true;
            var result = await AuthService.LoginUser(model);
            
            if (result.Success)
            {
                await ((CustomAuthStateProvider)AuthStateProvider).MarkUserAsAuthenticated(result.Data);
                NotificationService.Notify(NotificationSeverity.Success, "Başarılı", "Giriş başarılı!");
                NavigationManager.NavigateTo("/", true);
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Hata", result.Message);
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Hata", "Giriş sırasında bir hata oluştu.");
        }
        finally
        {
            isBusy = false;
        }
    }
}